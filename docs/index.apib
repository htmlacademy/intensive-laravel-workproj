FORMAT: 1A
HOST: https://laravel-api-intensive.localhost

# API Documentation

# Group Auth

Этот раздел описывает методы регистрации и аутентификации пользователя

## Регистрация пользователя [POST /api/register]

Регистрация нового пользователя для получения доступа к персональной части сайта.

+ Request (application/json)
    + Attributes
        + email: mail@example.com (required) - email адрес пользователя
        + name: username (required) - имя пользователя
        + password: 12345678 (required) - пароль
        + password_confirmation: 12345678 (required) - подтверждение пароля

+ Response 201 (application/json)
    ```
    {
        "data": {
            "token": "string",
            "user" {
                "name": "string"
            }
        }
    }
    ```

+ Request (application/json)

+ Response 422 (application/json)
    ```
        {
            "message": "Переданные данные не корректны.",
            "errors": {
                "name": [
                    "Поле Имя обязательно для заполнения."
                ],
                "email": [
                    "Поле E-Mail адрес обязательно для заполнения."
                ],
                "password": [
                    "Поле Пароль обязательно для заполнения."
                ]
            }
        }
    ```

## Авторизация [POST /api/login]

+ Request (application/json)
    + Attributes
        + email: mail@example.com (required) - email адрес пользователя
        + password: 12345678 (required) - пароль

+ Response 200 (application/json)
    ```
    {
        "data": {
            "token": "string"
        }
    }
    ```
+ Request (application/json)

+ Response 422 (application/json)
    ```
        {
            "message": "Переданные данные не корректны.",
            "errors": {
                "email": [
                    "Поле E-Mail адрес обязательно для заполнения."
                ],
                "password": [
                    "Поле Пароль обязательно для заполнения."
                ]
            }
        }
    ```

+ Request (application/json)
    + Body
        {
            "email": "notexisted@example.com",
            "password": "123"
        }

+ Response 422 (application/json)
    ```
        {
            "message": "Неверное имя пользователя или пароль.",
            "errors": {
                "exception": {
                    "name": "HttpException"
                }
            }
        }
    ```

## Выход [POST /api/logout]

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)

+ Response 204 (application/json)

# Group Shows

## Получение списка сериалов [GET /api/shows]

Получение списка сериалов с пагинацией по 20 элементов.

+ Request (application/json)
    + Attributes
        + page: 1 (number, optional) - номер страницы
        + order_by: rating (optional) - правило сортировки
        + order_to: desc (optional) - направление сортировки
        + genre: null (optional) - фильтрация по жанру
        + search: null (optional) - фильтрация по имени

+ Response 200 (application/json)
    ```
    {
        "data": [
            {
                "id": 0,
                "title": "string",
                "title_original": "string",
                "status": "string",
                "year": 0,
                "rating": 0,
                "total_seasons": 0,
                "total_episodes": 0,
                "genres": [
                    {
                        "id": 0,
                        "title": "string"
                    },
                ],
                "watch_status": "string",
                "watched_episodes": 0,
                "user_vote": 0
            },
        ]
    }
    ```

## Получение информации о сериале [GET /api/shows/{show}]

+ Parameters
    + show: `1` (number) - id идентификатор сериала.

+ Request (application/json)

+ Response 200 (application/json)
    ```
    {
        "data": {
            "id": 0,
            "title": "string",
            "title_original": "string",
            "status": "string",
            "year": 0,
            "rating": 0,
            "total_seasons": 0,
            "total_episodes": 0,
            "genres": [
                {
                    "id": 0,
                    "title": "string"
                },
            ],
            "watch_status": "string",
            "watched_episodes": 0,
            "user_vote": 0
        }
    }
    ```

## Получение списка жанров [GET /api/genres]

+ Request (application/json)

+ Response 200 (application/json)
    ```
    {
        "data": [
            {
                "id": 0,
                "title": "string"
            },
        ]
    }
    ```

## Получение списка эпизодов сериала [GET /api/shows/{show}/episodes]

+ Parameters
    + show: `1` (number) - id идентификатор сериала.

+ Request (application/json)

+ Response 200 (application/json)
    ```
    {
        "data": [
            {
                "id": 0,
                "title": "string",
                "show_id": 0,
                "season": 0,
                "episode_number": 0,
                "air_date": "string",
                "comments_count": 0,
                "watched": "boolean",
            },
        ]
    }
    ```

## Получение информации об эпизоде [GET /api/episode/{episode}]

+ Parameters
    + episode: `1` (number) - id идентификатор эпизода.

+ Request (application/json)

+ Response 200 (application/json)
    ```
    {
        "data": {
            "id": 0,
            "title": "string",
            "show_id": 0,
            "season": 0,
            "episode_number": 0,
            "air_date": "string",
            "comments_count": 0,
            "watched": "boolean",
        }
    }
    ```

## Получение списка комментариев эпизода [GET /api/episode/{episode}/comments]

+ Parameters
    + episode: `1` (number) - id идентификатор эпизода.

+ Request (application/json)

+ Response 200 (application/json)
    ```
    {
        "data": {
            "count": 0,
            "comments": [
                {
                    "id": 0,
                    "user": {
                        "name": "string",
                        "avatar": "string",
                    },
                    "comment": "string",
                    "parent_id": 0,
                    "created_at": "string",
                },
            ]
        }
    }
    ```

## Добавление комментария к эпизоду [POST /api/episode/{episode}/comments/{comment}]

+ Parameters
    + episode: `1` (number) - id идентификатор эпизод.
    + comment: `1` (number, optional) - id идентификатор комментария, для ответа.

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)
    + Body
        {
            "text": "text"
        }

+ Response 201 (application/json)

## Запрос на добавление сериала [POST /api/shows]

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)
    + Attributes
        + imdb: tt0944947 (string, required) - imdb id вида tt0944947

+ Response 201 (application/json)

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)
    + Body
    {
        "imdb": "tt0944947"
    }

+ Response 422 (application/json)
        {
            "message": "Переданные данные не корректны.",
            "errors": {
                "imdb": [
                    "Такой сериал уже есть."
                ]
            }
        }

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)
    + Body
    {
        "imdb": "944947"
    }

+ Response 422 (application/json)
        {
            "message": "Переданные данные не корректны.",
            "errors": {
                "imdb": [
                    "Идентификатор imdb должен быть в формате tt0000000."
                ]
            }
        }

# Group UserArea

## Обновление профиля [PATCH /api/user]

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)
    + Attributes
        + email: mail@example.com (required) - email адрес пользователя
        + name: username (required) - имя пользователя
        + password: 12345678 - пароль
        + password_confirmation: 12345678 - подтверждение пароля

+ Response 200 (application/json)
    ```
    {
        "data": {
            "name": "string",
            "email": "string",
            "avatar": "string"
        }
    }
    ```

+ Request (multipart/form-data; boundary={boundary value})
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)
    + Body

        --{boundary value}
        Content-Disposition: form-data; name="email"

        mail@example.com
        --{boundary value}
        Content-Disposition: form-data; name="name"

        username
        --{boundary value}
        Content-Disposition: form-data; name="password"

        12345678
        --{boundary value}
        Content-Disposition: form-data; name="password_confirmation"

        12345678
        --{boundary value}
        Content-Disposition: form-data; name='file'; filename='avatar.jpg'
        Content-Type: image/jpeg (according to the type of the uploaded file)

        {file content}
        --{boundary value}--

+ Response 200 (application/json)
    ```
    {
        "data": {
            "name": "string",
            "email": "string",
            "avatar": "string"
        }
    }
    ```

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)

+ Response 422 (application/json)

        {
            "message": "Переданные данные не корректны.",
            "errors": {
                "name": [
                    "Поле Имя обязательно для заполнения."
                ],
                "email": [
                    "Поле E-Mail адрес обязательно для заполнения."
                ]
            }
        }


## Получение списка просматриваемых сериалов пользователя [GET /api/user/shows]

Метод возвращает сериалы пользователя без пагинации.
Вместе с каждым сериалом возвращается информация о количестве просмотренных эпизодов и количестве вышедших серий -
на основании этой информации можно принять решение о необходимости получения списка не просмотренных серий.

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)

+ Response 200 (application/json)
    ```
    {
        "data": {
            "id": 0,
            "title": "string",
            "title_original": "string",
            "status": "string",
            "year": 0,
            "rating": 0,
            "total_seasons": 0,
            "total_episodes": 0,
            "watch_status": "string",
            "watched_episodes": 0,
            "user_vote": 0
        }
    }
    ```

## Получение списка эпизодов отслеживаемого сериала не просмотренных пользователем [GET /api/user/shows/{show}/new-episodes]

+ Parameters
    + show: `1` (number) - id идентификатор сериала.

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)

+ Response 200 (application/json)
    ```
    {
        "data": [
            {
                "id": 0,
                "title": "string",
                "show_id": 0,
                "season": 0,
                "episode_number": 0,
                "air_date": "string",
                "comments_count": 0,
                "watched": "string",
            },
        ]
    }
    ```

## Добавление сериала в список просматриваемых [POST /api/user/shows/watch/{show}]

+ Parameters
    + show: `1` (number) - id идентификатор сериала.

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)

+ Response 201 (application/json)


## Удаление сериала из списка просматриваемых [DELETE /api/user/shows/watch/{show}]

+ Parameters
    + show: `1` (number) - id идентификатор сериала.

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)

+ Response 201 (application/json)

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)

+ Response 422 (application/json)
    {
        "message": "Сериал не входит список просматриваемых пользователем."
    }

## Добавление эпизода в список просмотренных [POST /api/user/episodes/watch/{episode}]

+ Parameters
    + episode: `1` (number) - id идентификатор эпизода.

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)

+ Response 201 (application/json)

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)

+ Response 422 (application/json)
    {
        "message": "Сериал не входит список просматриваемых пользователем."
    }

## Удаление эпизода из списка просмотренных [DELETE /api/user/episodes/watch/{episode}]

+ Parameters
    + episode: `1` (number) - id идентификатор эпизода.

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)

+ Response 201 (application/json)

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)

+ Response 422 (application/json)
    {
        "message": "Сериал не входит список просматриваемых пользователем."
    }

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)

+ Response 422 (application/json)
    {
        "message": "Эпизод не входит список просматриваемых пользователем."
    }

## Добавление оценки сериалу [POST /api/user/shows/{show}/vote]

+ Parameters
    + show: `1` (number) - id идентификатор сериала.

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)
    + Body
        {
            "vote": 5
        }

+ Response 201 (application/json)

+ Request (application/json)
    + Headers
        Authorization: Bearer {$token} - auth token полученный после регистрации или аутентификации (required)
    + Body
        {
            "vote": 10
        }

+ Response 422 (application/json)
    {
        "message": "Переданные данные не корректны.",
        "errors": {
            "vote": [
                "Поле vote должно быть между 1 и 5."
            ]
        }
    }

<!--  документация генерится с помощью [aglio](https://github.com/danielgtaylor/aglio): `aglio -i index.apib -o index.html` -->
